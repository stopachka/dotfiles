(in-ns turing)
(in-ns 'turing)
(foo)
(def x [])
(assoc x 0 1)
(assoc x 3 1)
(turing-move-right [[] nil []])
(subvect [] 1)
(subvec [] 1)
(run-loop)
(run-loop ex-configuration)
(in-ns 'turing)
(run-loop ex-configuration)
(require 'turing)
(in-ns 'turing)
(future (run-step ex-configuration))
(future (run-loop ex-configuration))
(in-ns 'turing)
(future (run-loop ex-configuration))
(in-ns 'turing)
(future (run-loop ex-configuration))
*e
(in-ns 'turing)
(update transc-configuration :tape turing-print :foo)
(run-step transc-configuration)
*e
(find-instruction transc-configuration )
(run-step transc-configuration)
#{nil}
(contains? #{nil} nil)
(#{nil} nil)
(future (run-loop transc-configuration
                    ))
transc-configuration
(in-ns 'turing)
transc-configuration
(require :reload 'turing)
transc-configuration
(future (run-loop transc-configuration
                    ))
qCCDC
exit
(println "foo" "bar")
(in-ns 'turing )
(-> transc-configuration run-step)
(-> transc-configuration run-step (select-keys [:current-state :tape])))
(-> transc-configuration run-step (select-keys [:current-state :tape]))
(-> transc-configuration run-step run-step run-step run-step (select-keys [:current-state :tape])))
(-> transc-configuration run-step run-step run-step run-step (select-keys [:current-state :tape]))
(-> transc-configuration run-step run-step run-step run-step (selechhht-keys [:current-state :tape]))
(-> transc-configuration run-step run-step run-step run-step (select-keys [:current-state :tape]))
(run-loop transc-configuration )
(in-ns 'turing )
(run-loop transc-configuration )
(in-ns 'turing )
(run-loop transc-configuration 10000)
(in-ns 'stelectro.main)
ls
(require 'stelectro.main )
(in-ns 'user )
(require 'stelectro.main )
:q!
exit
(require 'stelectro.main )
